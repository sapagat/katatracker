#!/usr/bin/env ruby

class TestAndCommit
  OUTPUT_FILE = '/tmp/kata-tracker.txt'

  class << self
    def do(parameters)
      check_valid!(parameters)

      result = run_tests(parameters)
      print_tests_ouput(result)
      commit_changes(result)
    end

    private

    def check_valid!(parameters)
      if parameters.empty?
        puts "At least a test command is required. For example, rspec or npm test."
        exit 1
      end
    end

    def run_tests(parameters)
      test_command = parameters.join(' ')
      system("eval #{test_command} > #{OUTPUT_FILE}")
      test_exit_status = $?
      output = File.read(OUTPUT_FILE)
      Result.for(test_exit_status, output)
    end

    def commit_changes(result)
      system('git', 'add', '-A')
      system('git', 'commit', '-m', result.code_message)
      commit_exit_status = $?
      if commit_exit_status.success?
        system('git', 'commit', '--allow-empty','-m', result.output_message, '-m', result.output)
      end
    end

    def print_tests_ouput(result)
      puts result.colorized_output
    end

    class Result
      GREEN_COLOR = "\033[0;32m"
      RED_COLOR = "\033[0;31m"
      NO_COLOR = "\033[0;m"

      def self.for(test_exit_status, output)
        if test_exit_status.success?
          new('GREEN', '✅', GREEN_COLOR, output)
        else
          new('RED', '❌', RED_COLOR, output)
        end
      end

      attr_reader :output

      def initialize(status, icon, color, output)
        @status = status
        @icon = icon
        @color = color
        @output = output
        @timestamp = Time.now.to_i
      end

      def code_message
        "#{@icon} #{@status} #{@timestamp} - CODE"
      end

      def output_message
        "#{@icon} #{@status} #{@timestamp} - OUTPUT"
      end

      def colorized_output
        "#{@color}#{@output}#{NO_COLOR}"
      end
    end
  end
end

class Present
  class << self
    def do(_parameters)
      make_sure_tig_configured
      launch_tig
    end

    private

    def make_sure_tig_configured
      system('bash', '-c', 'git config --local --add tig.vertical-split false')
      system('bash', '-c', 'git config --local --add tig.split-view-height 90%')
      system('bash', '-c', 'git config --local --add tig.commit-order reverse')
    end

    def launch_tig
      system('bash', '-c', 'tig')
    end
  end
end

COMMANDS = {
  'tc' => TestAndCommit,
  'present' => Present
}
REPOSITORY_URL = 'https://github.com/sapagat/katatracker'

command = COMMANDS[ARGV[0]]
if command.nil?
  puts "KataTracker - Increments matter.\n\n"
  puts "Supported commands are:#{COMMANDS.keys.join(', ')}\n\n"
  puts "More details here: #{REPOSITORY_URL}"
  exit 0
end

parameters = ARGV[1..-1]
command.do(parameters)
